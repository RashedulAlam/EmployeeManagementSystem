// <auto-generated />
using System;
using EmployeeManagementService.Infrastructure.persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EmployeeManagementService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(EmployeeDbContext))]
    [Migration("20241016230632_Initial_Create")]
    partial class Initial_Create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("emaployeemanagement")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmployeeManagementService.Domain.Employee.Department", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 10, 16, 23, 6, 31, 625, DateTimeKind.Unspecified).AddTicks(3306), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 10, 16, 23, 6, 31, 625, DateTimeKind.Unspecified).AddTicks(3679), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments", "emaployeemanagement");
                });

            modelBuilder.Entity("EmployeeManagementService.Domain.Employee.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 10, 16, 23, 6, 31, 625, DateTimeKind.Unspecified).AddTicks(7995), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<DateTimeOffset>("HireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 10, 16, 23, 6, 31, 625, DateTimeKind.Unspecified).AddTicks(8439), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees", "emaployeemanagement");
                });

            modelBuilder.Entity("EmployeeManagementService.Domain.EmployeeTax.EmployeeTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("TaxInformationId")
                        .HasColumnType("character varying(36)");

                    b.Property<string>("TaxYearId")
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaxInformationId");

                    b.HasIndex("TaxYearId");

                    b.ToTable("EmployeeTaxes", "emaployeemanagement");
                });

            modelBuilder.Entity("EmployeeManagementService.Domain.Tax.TaxInformation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 10, 16, 23, 6, 31, 625, DateTimeKind.Unspecified).AddTicks(4903), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 10, 16, 23, 6, 31, 625, DateTimeKind.Unspecified).AddTicks(5239), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<decimal>("Rate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TaxInformations", "emaployeemanagement");
                });

            modelBuilder.Entity("EmployeeManagementService.Domain.Tax.TaxYear", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 10, 16, 23, 6, 31, 625, DateTimeKind.Unspecified).AddTicks(6611), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<DateTimeOffset>("LastModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2024, 10, 16, 23, 6, 31, 625, DateTimeKind.Unspecified).AddTicks(6978), new TimeSpan(0, 0, 0, 0, 0)));

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TaxYears", "emaployeemanagement");
                });

            modelBuilder.Entity("EmployeeManagementService.Domain.Employee.Employee", b =>
                {
                    b.HasOne("EmployeeManagementService.Domain.Employee.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EmployeeManagementService.Domain.EmployeeTax.EmployeeTax", b =>
                {
                    b.HasOne("EmployeeManagementService.Domain.Employee.Employee", "Employee")
                        .WithMany("EmployeeTaxes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeManagementService.Domain.Tax.TaxInformation", "TaxInformation")
                        .WithMany("EmployeeTaxes")
                        .HasForeignKey("TaxInformationId");

                    b.HasOne("EmployeeManagementService.Domain.Tax.TaxYear", "TaxYear")
                        .WithMany("EmployeeTaxes")
                        .HasForeignKey("TaxYearId");

                    b.Navigation("Employee");

                    b.Navigation("TaxInformation");

                    b.Navigation("TaxYear");
                });

            modelBuilder.Entity("EmployeeManagementService.Domain.Employee.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmployeeManagementService.Domain.Employee.Employee", b =>
                {
                    b.Navigation("EmployeeTaxes");
                });

            modelBuilder.Entity("EmployeeManagementService.Domain.Tax.TaxInformation", b =>
                {
                    b.Navigation("EmployeeTaxes");
                });

            modelBuilder.Entity("EmployeeManagementService.Domain.Tax.TaxYear", b =>
                {
                    b.Navigation("EmployeeTaxes");
                });
#pragma warning restore 612, 618
        }
    }
}
